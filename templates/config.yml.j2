server:
  http_listen_address: {{ openio_promtail_bind_address }}
  http_listen_port: {{ openio_promtail_bind_port }}
  grpc_listen_port: 0

positions:
  filename: {{ openio_service_volume }}/positions.yml

{% if openio_promtail_loki_group in groups %}
{%   if groups[openio_promtail_loki_group] | length > 0 %}
clients:
{%     for host in groups[openio_promtail_loki_group] %}
{%       set ip = hostvars[host].openio_loki_bind_address | d(hostvars[host].openio_bind_mgmt_address) | d(hostvars[host].ansible_default_ipv4.address)  %}
{%       set port = hostvars[host].openio_loki_bind_port | d(openio_promtail_loki_port)  %}
  - url: "http://{{ ip }}:{{ port }}/loki/api/v1/push"
{%     endfor %}
{%   endif %}
{% endif %}

scrape_configs:
  - job_name: journal
    journal:
      max_age: 1s
      labels:
        job: syslog
    relabel_configs:

      # Extract hostname
      - action: replace
        source_labels: ['__journal__hostname']
        target_label: 'host'

      # extract and convert priority to log_leve
      - action: replace
        source_labels: ['__journal_priority']
        target_label: 'log_level'
        regex: '^0$'
        replacement: 'EMERG'

      - action: replace
        source_labels: ['__journal_priority']
        target_label: 'log_level'
        regex: '^1$'
        replacement: 'ALERT'

      - action: replace
        source_labels: ['__journal_priority']
        target_label: 'log_level'
        regex: '^2$'
        replacement: 'CRIT'

      - action: replace
        source_labels: ['__journal_priority']
        target_label: 'log_level'
        regex: '^3$'
        replacement: 'ERROR'

      - action: replace
        source_labels: ['__journal_priority']
        target_label: 'log_level'
        regex: '^4$'
        replacement: 'WARNING'

      - action: replace
        source_labels: ['__journal_priority']
        target_label: 'log_level'
        regex: '^5$'
        replacement: 'NOTICE'

      - action: replace
        source_labels: ['__journal_priority']
        target_label: 'log_level'
        regex: '^6$'
        replacement: 'INFO'

      - action: replace
        source_labels: ['__journal_priority']
        target_label: 'log_level'
        regex: '^7$'
        replacement: 'DEBUG'

      # extract and convert syslog_facility
      - action: replace
        source_labels: ['__journal_syslog_facility']
        target_label: 'log_facility'
        regex: '^0$'
        replacement: 'KERN'

      - action: replace
        source_labels: ['__journal_syslog_facility']
        target_label: 'log_facility'
        regex: '^1$'
        replacement: 'USER'

      - action: replace
        source_labels: ['__journal_syslog_facility']
        target_label: 'log_facility'
        regex: '^2$'
        replacement: 'MAIL'

      - action: replace
        source_labels: ['__journal_syslog_facility']
        target_label: 'log_facility'
        regex: '^3$'
        replacement: 'DAEMON'

      - action: replace
        source_labels: ['__journal_syslog_facility']
        target_label: 'log_facility'
        regex: '^4$'
        replacement: 'AUTH'

      - action: replace
        source_labels: ['__journal_syslog_facility']
        target_label: 'log_facility'
        regex: '^5$'
        replacement: 'SYSLOG'

      - action: replace
        source_labels: ['__journal_syslog_facility']
        target_label: 'log_facility'
        regex: '^6$'
        replacement: LPR''

      - action: replace
        source_labels: ['__journal_syslog_facility']
        target_label: 'log_facility'
        regex: '^7$'
        replacement: 'NEWS'

      - action: replace
        source_labels: ['__journal_syslog_facility']
        target_label: 'log_facility'
        regex: '^8$'
        replacement: 'UUCP'

      - action: replace
        source_labels: ['__journal_syslog_facility']
        target_label: 'log_facility'
        regex: '^9$'
        replacement: 'CRON'

      - action: replace
        source_labels: ['__journal_syslog_facility']
        target_label: 'log_facility'
        regex: '^10$'
        replacement: 'AUTHPRIV'

      - action: replace
        source_labels: ['__journal_syslog_facility']
        target_label: 'log_facility'
        regex: '^11$'
        replacement: 'FTP'

      - action: replace
        source_labels: ['__journal_syslog_facility']
        target_label: 'log_facility'
        regex: '^16$'
        replacement: 'LOCAL0'

      - action: replace
        source_labels: ['__journal_syslog_facility']
        target_label: 'log_facility'
        regex: '^17$'
        replacement: 'LOCAL1'

      - action: replace
        source_labels: ['__journal_syslog_facility']
        target_label: 'log_facility'
        regex: '^18$'
        replacement: 'LOCAL2'

      - action: replace
        source_labels: ['__journal_syslog_facility']
        target_label: 'log_facility'
        regex: '^19$'
        replacement: 'LOCAL3'

      - action: replace
        source_labels: ['__journal_syslog_facility']
        target_label: 'log_facility'
        regex: '^20$'
        replacement: 'LOCAL4'

      - action: replace
        source_labels: ['__journal_syslog_facility']
        target_label: 'log_facility'
        regex: '^21$'
        replacement: 'LOCAL5'

      - action: replace
        source_labels: ['__journal_syslog_facility']
        target_label: 'log_facility'
        regex: '^22$'
        replacement: 'LOCAL6'

      - action: replace
        source_labels: ['__journal_syslog_facility']
        target_label: 'log_facility'
        regex: '^23$'
        replacement: 'LOCAL7'

      # only keep lines with specific OIO syslog identifier
      - action: keep
        regex: 'OIO,\w+,\w+,\d+'
        source_labels: ['__journal_syslog_identifier']

      # extract namespace from syslog identifier
      - action: replace
        source_labels: ['__journal_syslog_identifier']
        target_label: namespace
        regex: 'OIO,(\w+),\w+,\d+'
        replacement: '${1}'

      # extract service_type from syslog identifier
      - action: replace
        source_labels: ['__journal_syslog_identifier']
        target_label: service_type
        regex: 'OIO,\w+,(\w+),\d+'
        replacement: '${1}'

      # extract service from syslog identifier
      - action: replace
        source_labels: ['__journal_syslog_identifier']
        target_label: service
        regex: 'OIO,\w+,(\w+),(\d+)'
        replacement: '${1}-${2}'

      # drop line related to log services
      - action: drop
        regex: '^(loki|promtail|elasticsearch|kibana|filebeat)$'
        source_labels: ['service_type']

{% raw %}
    pipeline_stages:

      # by default, all lines are considered as info logs
      - template:
          source: log_type
          template: info

      # oioswift
      - match:
          selector: '{service_type="oioswift"}'
          stages:
            # match access logs
            - regex:
                expression: '^(?P<remote_addr>\S+) (?P<local_addr>\S+) \S+ (?P<method>\S+) (?P<url>\S+) \S+ (?P<status>\S+) \S+ (?P<user_agent>\S+) \S+ (?P<req_size>\S+) (?P<resp_size>\S+) \S+ (?P<txid>\S+) \S+ (?P<resp_time>\S+) (?P<swift_source>\S+) (?P<swift_s3_op>\S+) (?P<req_start_time>\S+) (?P<req_end_time>\S+) (?P<policy_index>\S+)$'

            # if {{ .method }} is not set it means the regex did not match
            # set log type
            - template:
                source: log_type
                template: '{{ if .method }}access{{ else }}info{{ end }}'

            # export log_type label
            - labels:
                log_type:

            # convert log line to key=value syntax if regex matched
            # otherwise return empty string which does not modify the message variable
            - template:
                source: message
                template: "{{ if .method }}remote_addr={{ .remote_addr }} method={{ .method }} url={{ .url }} status={{ .status }} user_agent={{ .user_agent }} req_size={{ .req_size }} resp_size={{ .resp_size }} txid={{ .txid }} resp_time={{ .resp_time }} swift_source={{ .swift_source }} swift_s3_op={{ .swift_s3_op }} req_start_time={{ .req_start_time }} req_end_time={{ .req_end_time }} policy_index={{ .policy_index }}{{ end }}"

            # replace line with message variable
            - output:
                source: message

      # rawx
      - match:
          selector: '{service_type="rawx"}'
          stages:
            # match access logs
            - regex:
                expression: '^\S+ access \S+ \S+ (?P<local_addr>\S+) (?P<remote_addr>\S+) (?P<method>\S+) (?P<status>\S+) (?P<resp_time_us>\S+) (?P<resp_size>\S+) (?P<req_size>\S+) \S+ (?P<txid>\S+) (?P<url>\S+)$'

            # if {{ .method }} is not set it means the regex did not match
            # set log type
            - template:
                source: log_type
                template: '{{ if .method }}access{{ else }}info{{ end }}'

            # export log_type label
            - labels:
                log_type:

            # convert log line to key=value syntax if regex matched
            # otherwise return empty string which does not modify the message variable
            - template:
                source: message
                template: "{{ if .method }}remote_addr={{ .remote_addr }} method={{ .method }} url={{ .url }} status={{ .status }} req_size={{ .req_size }} resp_size={{ .resp_size }} txid={{ .txid }} resp_time_us={{ .resp_time_us }}{{ end }}"

            # replace line with message variable
            - output:
                source: message

      # oioproxy
      - match:
          selector: '{service_type="oioproxy"}'
          stages:
            # match access logs
            - regex:
                expression: '^(?P<process_id>\S+) (?P<thread_id>\S+) access \S+ (?P<local_addr>\S+) (?P<remote_addr>\S+) (?P<method>\S+) (?P<status>\S+) (?P<resp_time_us>\S+) (?P<req_size>\S+) \S+ (?P<txid>\S+) (?P<url>\S+) (?P<playload>.*)$'

            # if {{ .method }} is not set it means the regex did not match
            # set log type
            - template:
                source: log_type
                template: '{{ if .method }}access{{ else }}info{{ end }}'

            # export log_type label
            - labels:
                log_type:

            # convert log line to key=value syntax if regex matched
            # otherwise return empty string which does not modify the message variable
            - template:
                source: message
                template: '{{ if .method }}remote_addr={{ .remote_addr }} method={{ .method }} url={{ .url }} status={{ .status }} req_size={{ .req_size }} txid={{ .txid }} resp_time_us={{ .resp_time_us }} {{ .playload }}{{ end }}'

            # replace line with message variable
            - output:
                source: message

      # meta*
      - match:
          selector: '{service_type=~"meta.*"}'
          stages:
            # match access logs
            - regex:
                expression: '^(?P<process_id>\S+) (?P<thread_id>\S+) access \S+ (?P<local_addr>\S+) (?P<remote_addr>\S+) (?P<method>\S+) (?P<status>\S+) (?P<resp_time_us>\S+) (?P<req_size>\S+) \S+ (?P<txid>\S+) (?P<playload>.*)$'

            # if {{ .method }} is not set it means the regex did not match
            # set log type
            - template:
                source: log_type
                template: '{{ if .method }}access{{ else }}info{{ end }}'

            # export log_type label
            - labels:
                log_type:

            # convert log line to key=value syntax if regex matched
            # otherwise return empty string which does not modify the message variable
            - template:
                source: message
                template: "{{ if .method }}remote_addr={{ .remote_addr }} method={{ .method }} status={{ .status }} req_size={{ .req_size }} txid={{ .txid }} resp_time_us={{ .resp_time_us }} {{ .playload }}{{ end }}"

            # replace line with message variable
            - output:
                source: message
{% endraw %}
